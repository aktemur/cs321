%{
 (*
   Grammar for the Exp language.
 *)
 open Exp;
 
%}

%token <int> CSTINT
%token <string> NAME

%token PLUS MINUS TIMES DIV
%token LPAR RPAR
%token LET EQ IN END
%token COMMA MIN
%token LESS
%token IF THEN ELSE
%token ANDAND OROR TRUE FALSE
%token INT BOOL COLON ARROW
%token EOF

%right ARROW
%nonassoc ELSE
%left OROR
%left ANDAND
%left LESS
%left PLUS MINUS
%left TIMES DIV


%start Main
%type <Exp.exp> Main Expr 

%%

Main:
    Expr EOF                            { $1 }
;

Expr:
  | CSTINT                              { CstI($1)               }
  | TRUE                                { CstB(true)             }
  | FALSE                               { CstB(false)            }
  | NAME                                { Var $1                 }
  | LPAR Expr RPAR                      { $2                     }
  | Expr PLUS  Expr                     { Prim("+",  $1, $3)     }
  | Expr MINUS Expr                     { Prim("-",  $1, $3)     }
  | Expr TIMES Expr                     { Prim("*",  $1, $3)     }
  | Expr DIV   Expr                     { Prim("/",  $1, $3)     }
  | Expr LESS  Expr                     { Prim("<",  $1, $3)     }
  | Expr ANDAND Expr                    { Prim("&&", $1, $3)     }
  | Expr OROR Expr                      { Prim("||", $1, $3)     }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)        }
  | LET NAME LPAR NAME COLON Type RPAR COLON Type EQ Expr IN Expr END
                                        { LetFun($2, $4, $6, $9, $11, $13) }
  | NAME LPAR Expr RPAR                 { Call($1, $3)           }
  | MIN LPAR Expr COMMA Expr RPAR       { Prim("minimum", $3, $5) }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6) }
;

Type:
  | INT                                 { TypI }
  | BOOL                                { TypB }
  | Type ARROW Type                     { TypF($1, $3) }
  | LPAR Type RPAR                      { $2 }