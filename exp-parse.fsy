%{
 (*
   Grammar for the Exp language.
 *)
 open Exp;
 
%}

%token <int> CSTINT
%token <string> NAME

%token PLUS MINUS TIMES DIV
%token LPAR RPAR
%token LET EQ IN END
%token MIN MAX COMMA GREATER
%token IF THEN ELSE
%token EOF

%nonassoc ELSE
%left EQ
%left GREATER
%left PLUS MINUS
%left TIMES DIV

%start Main
%type <Exp.exp> Main Expr 

%%

Main:
    Expr EOF                            { $1 }
;

Expr:
  | CSTINT                              { CstI($1)               }
  | NAME                                { Var $1                 }
  | LPAR Expr RPAR                      { $2                     }
  | Expr PLUS  Expr                     { Prim("+",  $1, $3)     }
  | Expr MINUS Expr                     { Prim("-",  $1, $3)     }
  | Expr TIMES Expr                     { Prim("*",  $1, $3)     }
  | Expr DIV   Expr                     { Prim("/",  $1, $3)     }
  | Expr EQ    Expr                     { Prim("=",  $1, $3)     }
  | Expr GREATER Expr                   { Prim(">",  $1, $3)     }
  | MIN LPAR Expr COMMA Expr RPAR       { Prim("min",$3, $5)     }
  | MAX LPAR Expr COMMA Expr RPAR       { Prim("max",$3, $5)     }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)        }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)         }
;

